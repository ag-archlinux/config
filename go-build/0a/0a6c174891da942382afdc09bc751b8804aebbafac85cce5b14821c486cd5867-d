// Code generated by cmd/cgo; DO NOT EDIT.

//line /tmp/yay/src/yay-8.1173.0/.go/src/github.com/jguer/go-alpm/alpm.go:1:1
// alpm.go - Implements exported libalpm functions.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

package alpm; import _cgo_unsafe "unsafe"

// #cgo LDFLAGS: -lalpm
// #include <alpm.h>
import _ "unsafe"

import "unsafe"

// Version returns libalpm version string.
func Version() string {
	return (_Cfunc_GoString)((_Cfunc_alpm_version)())
}

// VerCmp performs version comparison according to Pacman conventions. Return
// value is <0 if and only if v1 is older than v2.
func VerCmp(v1, v2 string) int {
	c1 := (_Cfunc_CString)(v1)
	c2 := (_Cfunc_CString)(v2)
	defer func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(c1))
	defer func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(c2))
	result := (_Cfunc_alpm_pkg_vercmp)(c1, c2)
	return int(result)
}
