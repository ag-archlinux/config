// Code generated by cmd/cgo; DO NOT EDIT.

//line /tmp/yay/src/yay-8.1173.0/.go/src/github.com/jguer/go-alpm/trans.go:1:1
// db.go - Functions for database handling.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

package alpm

/*
#include <alpm.h>
*/
import _ "unsafe"

import (
	"unsafe"
)

func (h *Handle) TransInit(flags TransFlag) error {
	ret := func(_cgo0 *_Ctype_struct___alpm_handle_t, _cgo1 _Ctype_int) _Ctype_int {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_trans_init)(_cgo0, _cgo1);}(h.ptr, _Ctype_int(flags))
	if ret != 0 {
		return h.LastError()
	}

	return nil
}

func (h *Handle) TransRelease() error {
	ret := func(_cgo0 *_Ctype_struct___alpm_handle_t) _Ctype_int {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_trans_release)(_cgo0);}(h.ptr)
	if ret != 0 {
		return h.LastError()
	}

	return nil
}

func (h *Handle) TransGetAdd() PackageList {
	pkgs := func(_cgo0 *_Ctype_struct___alpm_handle_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_trans_get_add)(_cgo0);}(h.ptr)
	return PackageList{(*list)(unsafe.Pointer(pkgs)), *h}
}

func (h *Handle) TransGetRemove() PackageList {
	pkgs := func(_cgo0 *_Ctype_struct___alpm_handle_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_trans_get_remove)(_cgo0);}(h.ptr)
	return PackageList{(*list)(unsafe.Pointer(pkgs)), *h}
}

func (h *Handle) TransGetFalgs() (TransFlag, error) {
	flags := func(_cgo0 *_Ctype_struct___alpm_handle_t) _Ctype_int {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_trans_get_flags)(_cgo0);}(h.ptr)

	if flags == -1 {
		return -1, h.LastError()
	}

	return TransFlag(flags), nil
}
