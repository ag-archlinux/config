// Code generated by cmd/cgo; DO NOT EDIT.

//line /tmp/yay/src/yay-8.1173.0/.go/src/github.com/jguer/go-alpm/package.go:1:1
// package.go - libalpm package type and methods.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

package alpm; import _cgo_unsafe "unsafe"

/*
#include <alpm.h>

int pkg_cmp(const void *v1, const void *v2)
{
    alpm_pkg_t *p1 = (alpm_pkg_t *)v1;
    alpm_pkg_t *p2 = (alpm_pkg_t *)v2;
    off_t s1 = alpm_pkg_get_isize(p1);
    off_t s2 = alpm_pkg_get_isize(p2);

    if (s1 > s2)
        return -1;
    else if (s1 < s2)
        return 1;
    else
        return 0;
}
*/
import _ "unsafe"

import (
	"time"
	"unsafe"
)

// Package describes a single package and associated handle.
type Package struct {
	pmpkg  *_Ctype_struct___alpm_pkg_t
	handle Handle
}

// PackageList describes a linked list of packages and associated handle.
type PackageList struct {
	*list
	handle Handle
}

// ForEach executes an action on each package of the PackageList.
func (l PackageList) ForEach(f func(Package) error) error {
	return l.forEach(func(p unsafe.Pointer) error {
		return f(Package{(*_Ctype_struct___alpm_pkg_t)(p), l.handle})
	})
}

// Slice converts the PackageList to a Package Slice.
func (l PackageList) Slice() []Package {
	slice := []Package{}
	l.ForEach(func(p Package) error {
		slice = append(slice, p)
		return nil
	})
	return slice
}

// SortBySize returns a PackageList sorted by size.
func (l PackageList) SortBySize() PackageList {
	pkgList := (*_Ctype_struct___alpm_list_t)(unsafe.Pointer(l.list))

	pkgCache := (*list)(unsafe.Pointer(
		func(_cgo0 *_Ctype_struct___alpm_list_t, _cgo1 _Ctype_size_t, _cgo2 *[0]byte) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_list_msort)(_cgo0, _cgo1, _cgo2);}(pkgList,
			func(_cgo0 *_Ctype_struct___alpm_list_t) _Ctype_size_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_list_count)(_cgo0);}(pkgList),
			_Ctype_alpm_list_fn_cmp((_Cgo_ptr(_Cfpvar_fp_pkg_cmp))))))

	return PackageList{pkgCache, l.handle}
}

// DependList describes a linkedlist of dependency type packages.
type DependList struct{ *list }

// ForEach executes an action on each package of the DependList.
func (l DependList) ForEach(f func(Depend) error) error {
	return l.forEach(func(p unsafe.Pointer) error {
		dep := convertDepend((*_Ctype_struct__alpm_depend_t)(p))
		return f(dep)
	})
}

// Slice converts the DependList to a Depend Slice.
func (l DependList) Slice() []Depend {
	slice := []Depend{}
	l.ForEach(func(dep Depend) error {
		slice = append(slice, dep)
		return nil
	})
	return slice
}

func (pkg Package) FileName() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_filename)(_cgo0);}(pkg.pmpkg))
}

func (pkg Package) Base() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_base)(_cgo0);}(pkg.pmpkg))
}

func (pkg Package) Base64Signature() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_base64_sig)(_cgo0);}(pkg.pmpkg))
}

func (pkg Package) Validation() Validation {
	return Validation(func(_cgo0 *_Ctype_struct___alpm_pkg_t) _Ctype_int {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_validation)(_cgo0);}(pkg.pmpkg))
}

// Architecture returns the package target Architecture.
func (pkg Package) Architecture() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_arch)(_cgo0);}(pkg.pmpkg))
}

func (pkg Package) Deltas() StringList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_deltas)(_cgo0);}(pkg.pmpkg))
	return StringList{(*list)(ptr)}
}

// Backup returns a list of package backups.
func (pkg Package) Backup() BackupList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_backup)(_cgo0);}(pkg.pmpkg))
	return BackupList{(*list)(ptr)}
}

// BuildDate returns the BuildDate of the package.
func (pkg Package) BuildDate() time.Time {
	t := func(_cgo0 *_Ctype_struct___alpm_pkg_t) _Ctype_alpm_time_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_builddate)(_cgo0);}(pkg.pmpkg)
	return time.Unix(int64(t), 0)
}

// Conflicts returns the conflicts of the package as a DependList.
func (pkg Package) Conflicts() DependList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_conflicts)(_cgo0);}(pkg.pmpkg))
	return DependList{(*list)(ptr)}
}

// DB returns the package's origin database.
func (pkg Package) DB() *Db {
	ptr := func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_db_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_db)(_cgo0);}(pkg.pmpkg)
	if ptr == nil {
		return nil
	}
	return &Db{ptr, pkg.handle}
}

// Depends returns the package's dependency list.
func (pkg Package) Depends() DependList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_depends)(_cgo0);}(pkg.pmpkg))
	return DependList{(*list)(ptr)}
}

// Depends returns the package's optional dependency list.
func (pkg Package) OptionalDepends() DependList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_optdepends)(_cgo0);}(pkg.pmpkg))
	return DependList{(*list)(ptr)}
}

// Depends returns the package's check dependency list.
func (pkg Package) CheckDepends() DependList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_checkdepends)(_cgo0);}(pkg.pmpkg))
	return DependList{(*list)(ptr)}
}

// Depends returns the package's make dependency list.
func (pkg Package) MakeDepends() DependList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_makedepends)(_cgo0);}(pkg.pmpkg))
	return DependList{(*list)(ptr)}
}

// Description returns the package's description.
func (pkg Package) Description() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_desc)(_cgo0);}(pkg.pmpkg))
}

// Files returns the file list of the package.
func (pkg Package) Files() []File {
	cFiles := func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct__alpm_filelist_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_files)(_cgo0);}(pkg.pmpkg)
	return convertFilelist(cFiles)
}

// Groups returns the groups the package belongs to.
func (pkg Package) Groups() StringList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_groups)(_cgo0);}(pkg.pmpkg))
	return StringList{(*list)(ptr)}
}

// ISize returns the package installed size.
func (pkg Package) ISize() int64 {
	t := func(_cgo0 *_Ctype_struct___alpm_pkg_t) _Ctype_off_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_isize)(_cgo0);}(pkg.pmpkg)
	return int64(t)
}

// InstallDate returns the package install date.
func (pkg Package) InstallDate() time.Time {
	t := func(_cgo0 *_Ctype_struct___alpm_pkg_t) _Ctype_alpm_time_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_installdate)(_cgo0);}(pkg.pmpkg)
	return time.Unix(int64(t), 0)
}

// Licenses returns the package license list.
func (pkg Package) Licenses() StringList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_licenses)(_cgo0);}(pkg.pmpkg))
	return StringList{(*list)(ptr)}
}

// SHA256Sum returns package SHA256Sum.
func (pkg Package) SHA256Sum() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_sha256sum)(_cgo0);}(pkg.pmpkg))
}

// MD5Sum returns package MD5Sum.
func (pkg Package) MD5Sum() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_md5sum)(_cgo0);}(pkg.pmpkg))
}

// Name returns package name.
func (pkg Package) Name() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_name)(_cgo0);}(pkg.pmpkg))
}

// Packager returns package packager name.
func (pkg Package) Packager() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_packager)(_cgo0);}(pkg.pmpkg))
}

// Provides returns DependList of packages provides by package.
func (pkg Package) Provides() DependList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_provides)(_cgo0);}(pkg.pmpkg))
	return DependList{(*list)(ptr)}
}

// Reason returns package install reason.
func (pkg Package) Reason() PkgReason {
	reason := func(_cgo0 *_Ctype_struct___alpm_pkg_t) _Ctype_alpm_pkgreason_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_reason)(_cgo0);}(pkg.pmpkg)
	return PkgReason(reason)
}

// Origin returns package origin.
func (pkg Package) Origin() PkgFrom {
	origin := func(_cgo0 *_Ctype_struct___alpm_pkg_t) _Ctype_alpm_pkgfrom_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_origin)(_cgo0);}(pkg.pmpkg)
	return PkgFrom(origin)
}

// Replaces returns a DependList with the packages this package replaces.
func (pkg Package) Replaces() DependList {
	ptr := unsafe.Pointer(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_replaces)(_cgo0);}(pkg.pmpkg))
	return DependList{(*list)(ptr)}
}

// Size returns the packed package size.
func (pkg Package) Size() int64 {
	t := func(_cgo0 *_Ctype_struct___alpm_pkg_t) _Ctype_off_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_size)(_cgo0);}(pkg.pmpkg)
	return int64(t)
}

// URL returns the upstream URL of the package.
func (pkg Package) URL() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_url)(_cgo0);}(pkg.pmpkg))
}

// Version returns the package version.
func (pkg Package) Version() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_get_version)(_cgo0);}(pkg.pmpkg))
}

// ComputeRequiredBy returns the names of reverse dependencies of a package
func (pkg Package) ComputeRequiredBy() []string {
	result := func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_compute_requiredby)(_cgo0);}(pkg.pmpkg)
	requiredby := make([]string, 0)
	for i := (*list)(unsafe.Pointer(result)); i != nil; i = i.Next {
		defer func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(i))
		if i.Data != nil {
			defer func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(i.Data)
			name := (_Cfunc_GoString)((*_Ctype_char)(i.Data))
			requiredby = append(requiredby, name)
		}
	}
	return requiredby
}

// ComputeOptionalFor returns the names of packages that optionally require the given package
func (pkg Package) ComputeOptionalFor() []string {
	result := func(_cgo0 *_Ctype_struct___alpm_pkg_t) *_Ctype_struct___alpm_list_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_pkg_compute_optionalfor)(_cgo0);}(pkg.pmpkg)
	optionalfor := make([]string, 0)
	for i := (*list)(unsafe.Pointer(result)); i != nil; i = i.Next {
		defer func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(i))
		if i.Data != nil {
			defer func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(i.Data)
			name := (_Cfunc_GoString)((*_Ctype_char)(i.Data))
			optionalfor = append(optionalfor, name)
		}
	}
	return optionalfor
}

// NewVersion checks if there is a new version of the package in the Synced DBs.
func (pkg Package) NewVersion(l DbList) *Package {
	ptr := func(_cgo0 *_Ctype_struct___alpm_pkg_t, _cgo1 *_Ctype_struct___alpm_list_t) *_Ctype_struct___alpm_pkg_t {;	_cgoCheckPointer(_cgo0);	_cgoCheckPointer(_cgo1);	return (_Cfunc_alpm_sync_newversion)(_cgo0, _cgo1);}(pkg.pmpkg,
		(*_Ctype_struct___alpm_list_t)(unsafe.Pointer(l.list)))
	if ptr == nil {
		return nil
	}
	return &Package{ptr, l.handle}
}

func (pkg Package) ShouldIgnore() bool {
	result := func(_cgo0 *_Ctype_struct___alpm_handle_t, _cgo1 *_Ctype_struct___alpm_pkg_t) _Ctype_int {;	_cgoCheckPointer(_cgo0);	_cgoCheckPointer(_cgo1);	return (_Cfunc_alpm_pkg_should_ignore)(_cgo0, _cgo1);}(pkg.handle.ptr, pkg.pmpkg)
	return result == 1
}
