// Code generated by cmd/cgo; DO NOT EDIT.

//line /tmp/yay/src/yay-8.1173.0/.go/src/github.com/jguer/go-alpm/dependency.go:1:1
package alpm; import _cgo_unsafe "unsafe"

/*
#include <alpm.h>
*/
import _ "unsafe"
import (
	"fmt"
	"unsafe"
)

// FindSatisfier searches a DbList for a package that satisfies depstring
// Example "glibc>=2.12"
func (l DbList) FindSatisfier(depstring string) (*Package, error) {
	cDepString := (_Cfunc_CString)(depstring)
	defer func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(cDepString))

	pkgList := (*_Ctype_struct___alpm_list_t)(unsafe.Pointer(l.list))
	pkgHandle := (*_Ctype_struct___alpm_handle_t)(unsafe.Pointer(l.handle.ptr))

	ptr := func(_cgo0 *_Ctype_struct___alpm_handle_t, _cgo1 *_Ctype_struct___alpm_list_t, _cgo2 *_Ctype_char) *_Ctype_struct___alpm_pkg_t {;	_cgoCheckPointer(_cgo0);	_cgoCheckPointer(_cgo1);	return (_Cfunc_alpm_find_dbs_satisfier)(_cgo0, _cgo1, _cgo2);}(pkgHandle, pkgList, cDepString)
	if ptr == nil {
		return nil,
			fmt.Errorf("unable to satisfy dependency %s in Dblist", depstring)
	}

	return &Package{ptr, l.handle}, nil
}

// FindSatisfier finds a package that satisfies depstring from PkgList
func (l PackageList) FindSatisfier(depstring string) (*Package, error) {
	cDepString := (_Cfunc_CString)(depstring)
	defer func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(cDepString))

	pkgList := (*_Ctype_struct___alpm_list_t)(unsafe.Pointer(l.list))

	ptr := func(_cgo0 *_Ctype_struct___alpm_list_t, _cgo1 *_Ctype_char) *_Ctype_struct___alpm_pkg_t {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_alpm_find_satisfier)(_cgo0, _cgo1);}(pkgList, cDepString)
	if ptr == nil {
		return nil,
			fmt.Errorf("unable to find dependency %s in PackageList", depstring)
	}

	return &Package{ptr, l.handle}, nil
}
